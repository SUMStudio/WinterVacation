// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=selRAM16);
    And(a=address[14], b=address[13], out=selKBD);
    Not(in=selKBD, out=notselKBD);
    And(a=address[14], b=notselKBD, out=selSCREEN);    
    And(a=selRAM16, b=load, out=loadRAM16);
    And(a=selKBD, b=load, out=loadKBD);
    And(a=selSCREEN, b=load, out=loadSCREEN);
    /*
    And(a=loadSCREEN, b=in[13], out=loadSC1);
    Not(in=loadSC1, out=notloadSC1);
    And(a=loadSCREEN, b=notloadSC1, out=selSC0);
    And(a=selSC0, b=load, out=loadSC0);
    */
    
    RAM16K(in=in, load=loadRAM16, address=address[0..13], out=outRAM16);
    /*
    RAM4K(in=in, load=loadSC0, address=address[0..11], out=outSC0);
    RAM4K(in=in, load=loadSC1, address=address[0..11], out=outSC1);
    */
    Screen(in=in, load=loadSCREEN, address=address[0..12], out=outSCREEN);
    Keyboard(out=outKBD);

    //Mux16(a=outSC0, b=outSC1, sel=in[13], out=outSCREEN);
    Mux16(a=outSCREEN, b=outKBD, sel=selKBD, out=outIO);
    Mux16(a=outIO, b=outRAM16, sel=selRAM16, out=out);
}